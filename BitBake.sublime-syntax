%YAML 1.2
---

# https://www.sublimetext.com/docs/3/syntax.html
# https://www.sublimetext.com/docs/3/scope_naming.html

name: BitBake
file_extensions: [bb, bbappend, bbclass, conf, inc]
scope: source.bitbake

variables:
  assignment_operators: '(\?\?\=|\?\=|\:\=|\+\=|\=\+|\.\=|\=\.|\=)'
  builtin_variables: '()'

contexts:
  prototype:
    - include: comments
    - include: inline_python

  main:
    - include: sharing_functionality
    - include: task_modification
    - include: function_defnitions
    - include: variable_assignments

    # Highlight everything uncaptured during development
    - match: '\S'
      scope: invalid.illegal

# ------------------------------------------------------------------------------

  comments:
    - match: '^\s*#'
      set:
      - meta_scope: comment.line.bitbake
      with_prototype:
      - match: '$'
        pop: true

  function_defnitions:
    - match: '^(def)\s+(\S+)\s*\(.*\)\s*:\s*$'
      captures:
        1: storage.type.bitbake
        2: entity.name.function.bitbake
      set: Packages/Python/Python.sublime-syntax
      with_prototype:
      - match: '^(?=\S+)'
        pop: true

    - match: '^(python)(\s+(\S+)\s*)?\(\)\s*{'
      captures:
        1: storage.type.bitbake
        2: entity.name.function.bitbake
      set: Packages/Python/Python.sublime-syntax
      with_prototype:
      - match: '}(?=\s*)$'
        pop: true

    - match: '^(\S+)\s*\(\)\s*{'
      captures:
        1: entity.name.function.bitbake
      set: Packages/ShellScript/Shell-Unix-Generic.sublime-syntax
      with_prototype:
      - match: '}(?=\s*)$'
        pop: true

  variable_assignments:
    - match: '^\s*(?:(export)\s+)?(\S+)\s*({{assignment_operators}})'
      captures:
        1: storage.modifier.bitbake
        2: variable.other.bitbake
        3: keyword.operator.assignment.bitbake
      push: variable_assignment_scope

  sharing_functionality:
    - match: '^\s*\b(inherit|include|require)\b'
      scope: keyword.control.import.bitbake
      push: sharing_functionality_scope

  task_modification:
    - match: '^\s*\b(addtask|deltask)\b'
      scope: keyword.control.conditional.bitbake
      push: task_modification_scope

# ------------------------------------------------------------------------------

  variable_assignment_scope:
    - include: strings
    - match: '\n'
      pop: true

  sharing_functionality_scope:
    - match: '\n'
      pop: true

  task_modification_scope:
    - match: '\b(before|after)\b'
      scope: keyword.control.conditional.bitbake
    - match: '\n'
      pop: true

  strings:
    - match: "'"
      scope: punctuation.definition.string.begin.bitbake
      push: string_single_quoted

    - match: '"'
      scope: punctuation.definition.string.begin.bitbake
      push: string_double_quoted

  string_single_quoted:
    - meta_scope: string.quoted.single.bitbake
    - match: "'"
      scope: punctuation.definition.string.end.bitbake
      pop: true
    - include: access_variable
    - include: string_escape_char

  string_double_quoted:
    - meta_scope: string.quoted.double.bitbake
    - match: '"'
      scope: punctuation.definition.string.end.bitbake
      pop: true
    - include: access_variable
    - include: string_escape_char

  string_escape_char:
    - match: '\\(.|\n)'
      scope: constant.character.escape.bitbake

  inline_python:
    - match: '\${@'
      embed: Packages/Python/Python.sublime-syntax
      escape: '(?=})'

  access_variable:
    - match: '\${(?={{builtin_variables}})'
      push:
      - meta_scope: variable.language.bitbake
      with_prototype:
      - match: '}'
        pop: true

    - match: '\${'
      push:
      - meta_scope: variable.parameter.bitbake
      with_prototype:
      - match: '}'
        pop: true
